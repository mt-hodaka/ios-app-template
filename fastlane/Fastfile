# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

platform :ios do
  before_all do |lane, options|
  end

  lane :test do |options|
    workspace = options[:workspace]
    scheme = options[:scheme]
    derived_data_path = ENV["DERIVED_DATA_PATH"]

    run_tests(
      workspace: workspace,
      scheme: scheme,
      derived_data_path: derived_data_path,
      xcargs: "-skipPackagePluginValidation",
      result_bundle: true,
      skip_slack: true
    )
  end

  lane :deploy do |options|
    workspace = options[:workspace]
    scheme = options[:scheme]
    derived_data_path = ENV["DERIVED_DATA_PATH"]
    team_id = ENV["TEAM_ID"]

    app_store_connect_api_key

    export_xcargs = ["-allowProvisioningUpdates"]

    if is_ci?
      export_xcargs.concat [
        "-authenticationKeyIssuerID", ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
        "-authenticationKeyID", ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"],
        "-authenticationKeyPath", ENV["APP_STORE_CONNECT_API_KEY_KEY_FILEPATH"],
      ]
    end

    build_app(
      workspace: workspace,
      scheme: scheme,
      derived_data_path: derived_data_path,
      export_team_id: team_id,
      skip_codesigning: true,
      xcargs: "-skipPackagePluginValidation",
      export_xcargs: export_xcargs.join(" ")
    )

    upload_to_testflight(
      skip_waiting_for_build_processing: true
    )
  end

  lane :set_version_number do |options|
    xcconfig_path = options[:xcconfig_path]
    version_number = options[:version_number]

    if version_number.empty?
      current = get_xcconfig_value(
        path: xcconfig_path,
        name: "MARKETING_VERSION"
      )

      version_number = UI.input("Please enter new version (current is #{current}): ")
    end

    update_xcconfig_value(
      path: xcconfig_path,
      name: "MARKETING_VERSION",
      value: version_number
    )
  end

  lane :set_build_number do |options|
    xcconfig_path = options[:xcconfig_path]
    build_number = options[:build_number]

    if build_number.empty?
      current = get_xcconfig_value(
        path: xcconfig_path,
        name: "CURRENT_PROJECT_VERSION"
      )

      build_number = UI.input("Please enter new build number (current is #{current}): ")
    end

    update_xcconfig_value(
      path: xcconfig_path,
      name: "CURRENT_PROJECT_VERSION",
      value: build_number
    )
  end

  after_all do |lane, options|
  end

  error do |lane, exception, options|
    return unless is_ci?

    slack(
      message: exception.message,
      success: false
    )
  end

  private_lane :get_build_setting do |options|
    workspace = options[:workspace]
    scheme = options[:scheme]
    build_setting_key = options[:build_setting_key]
    xcargs = ["-showBuildSettings"]
    xcargs.concat ["-derivedDataPath", ENV["DERIVED_DATA_PATH"]] unless ENV["DERIVED_DATA_PATH"].nil?

    build_settings = xcodebuild(
      workspace: workspace,
      scheme: scheme,
      xcargs: xcargs.join(" "),
      raw_buildlog: true
    )

    /#{build_setting_key} = (.+)/.match(build_settings).to_a[1]
  end

  def retry_on_error(times: 3)
    try = 0
    begin
      try += 1
      yield
    rescue
      retry if try < times
      raise
    end
  end
end
