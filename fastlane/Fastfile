# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

platform :ios do
  before_all do |lane, options|
    xcodes(
      binary_path: ENV["MINT_LINK_PATH"] + "/xcodes",
      select_for_current_build_only: true
    )
  end

  lane :test do |options|
    xcargs = "-skipPackagePluginValidation" if is_ci?

    run_tests(
      workspace: options[:workspace],
      scheme: options[:scheme],
      derived_data_path: ENV["DERIVED_DATA_PATH"],
      xcargs: xcargs,
      result_bundle: true,
      skip_slack: true
    )
  end

  lane :deploy do |options|
    app_store_connect_api_key

    if is_ci? then
      bundle_id = get_build_setting(
        workspace: options[:workspace],
        scheme: options[:scheme],
        build_setting_key: "PRODUCT_BUNDLE_IDENTIFIER"
      )

      retry_on_error do
        get_provisioning_profile(app_identifier: bundle_id)
      end

      skip_codesigning = true
      export_team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
      xcargs = "-skipPackagePluginValidation"
    else
      xcargs = "-allowProvisioningUpdates"
      export_xcargs = "-allowProvisioningUpdates"
    end

    build_app(
      workspace: options[:workspace],
      scheme: options[:scheme],
      derived_data_path: ENV["DERIVED_DATA_PATH"],
      skip_codesigning: skip_codesigning,
      export_team_id: export_team_id,
      xcargs: xcargs,
      export_xcargs: export_xcargs
    )

    upload_to_testflight(
      skip_waiting_for_build_processing: true
    )
  end

  lane :update_version_number do |options|
    current = get_xcconfig_value(
      path: options[:xcconfig_path],
      name: "MARKETING_VERSION"
    )

    version = UI.input("Please enter new version (current is #{current}): ")

    update_xcconfig_value(
      path: options[:xcconfig_path],
      name: "MARKETING_VERSION",
      value: version
    )
  end

  lane :update_build_number do |options|
    update_xcconfig_value(
      path: options[:xcconfig_path],
      name: "CURRENT_PROJECT_VERSION",
      value: options[:build_number]
    )
  end

  after_all do |lane, options|
  end

  error do |lane, exception, options|
    return unless is_ci?

    slack(
      message: exception.message,
      success: false
    )
  end

  private_lane :get_build_setting do |options|
    xcargs = ["-showBuildSettings"]
    xcargs.concat ["-derivedDataPath", ENV["DERIVED_DATA_PATH"]] unless ENV["DERIVED_DATA_PATH"].nil?

    build_settings = xcodebuild(
      workspace: options[:workspace],
      scheme: options[:scheme],
      xcargs: xcargs.join(" "),
      raw_buildlog: true
    )

    /#{options[:build_setting_key]} = (.+)/.match(build_settings).to_a[1]
  end

  def retry_on_error(times: 3)
    try = 0
    begin
      try += 1
      yield
    rescue
      retry if try < times
      raise
    end
  end
end
